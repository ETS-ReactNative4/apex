<!doctype html>
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Apex 4X Beginner Tutorial</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="Templates/_common/_doc_files/css/global.css">
    <link rel="stylesheet" type="text/css" href="Templates/_common/_doc_files/css/components-style.css">
    <link rel="stylesheet" type="text/css" href="Templates/_common/_doc_files/prism.css">
    <script src="Templates/_common/_doc_files/prism.js"></script>

    <script src="4X/4X.js"></script>
    <script src="4X/Standard/Modules/Beep.js"></script>

    <style type="text/css">
        h2.heading--onblack,
        h3.heading--onblack,
        h4.heading--onblack {
            color: #ffcc00;
            font-family: Frutiger, Helvetica, Arial, sans-serif;
            font-size: 1.2rem;
            font-weight: 700;
            line-height: 1.2;
            margin-bottom: 1.2em;
            margin-top: 1.2em;
        }

        a.templatesLink {
            padding: 5px;
            font-size: 1.3em;
            color: #fff;
        }

        a.templatesLink:focus,
        a.templatesLink:hover {
            text-decoration: none;
        }
    </style>

</head>

<body>
    <div class="outer-wrapper">
        <header class="header">
            <div class="logo">
                <a href="WhatSock/index.htm">
                    <img alt="WhatSock : Changing the world one step at a time" src="Templates/_common/_doc_files/img/whatsock.svg" />
                </a>
            </div>
            <nav class="navigation--parent">
                <ul>
                    <li><a href="Templates/index.htm">Widget Templates</a></li>
                </ul>
            </nav>
        </header>
        <div class="wrapper">
            <main id="main" class="main">
                <h1><strong>Beginner Tutorial</strong> </h1>
                <h2 class="heading--onblack">Loading 4X</h2>
                <div>
                    <p>
                        4X, loaded like so, is a rendering API that includes a collection of powerful ARIA-related functions for building feature-rich internet applications that ensure accessibility for people with disabilities.
                    </p>
                </div>
                <div>
                    <pre><code class="language-markup">
    &lt;script src="4X/4X.js">&lt;/script>
</code></pre>
                </div>
                <div>
                    <p>
                        Once loaded, all the properties and methods documented within the following Help subfolders are available for immediate use:
                    </p>
                </div>
                <ul>
                    <li>Help/$A API</li>
                    <li>Help/ARIA Development</li>
                    <li>Help/DC API</li>
                </ul>
                <section aria-label="Example 1">
                    <h3 class="heading--onblack">Example 1</h3>
                    <div>
                        <p>
                            Using core 4X features to add enhanced accessibility for assistive technology users.
                        </p>
                    </div>
                    <div>
                        <textarea title="Example 1 markup" style="min-width: 90%;" id="example1.1">
<h4 class="shipping"> Shipping </h4>
<form class="shipping">
<p><label>Street: <input type="text" name="address"></label></p>
<p><label>City: <input type="text" name="city"></label></p>
<p><label>Zipcode: <input type="text" name="zip"></label></p>
</form>
</textarea>
                    </div>
                    <div>
                        <textarea title="Example 1 JS" style="min-width: 90%;" id="example1.2">
// Set the specified heading as the description for the referenced form fields.
// Automatically sets the description for non-sighted screen reader users.
// Help/ARIA Development/DescribedBy

$A("form.shipping input").describedBy("h4.shipping");
</textarea>
                    </div>
                    <div>
                        <button class="example1">Render Example 1</button>
                        <div role="region" aria-label="Rendered Markup" id="example1"></div>
                        <script type="text/javascript">
                            (function() {
                                var markup = $A.get("example1.1"),
                                    js = $A.get("example1.2"),
                                    div = $A.get("example1");
                                $A.on("button.example1", "click", function(ev) {
                                    try {
                                        div.innerHTML = markup.value;
                                        var f = new Function("window,document,$A", js.value);
                                        f.call(window, window, document, $A);
                                        $A.beep();
                                    } catch (e) {
                                        throw e;
                                    }
                                });
                            })();
                        </script>
                    </div>
                </section>
                <section aria-label="Example 2">
                    <h3 class="heading--onblack">Example 2</h3>
                    <div>
                        <p>
                            Using core 4X features to add keyboard support and accessible role information to a simulated active element for assistive technology users.
                        </p>
                    </div>
                    <div>
                        <link rel="stylesheet" type="text/css" href="Templates/Buttons/Standard/css/buttons.css">
                        <textarea title="Example 2 markup" style="min-width: 90%;" id="example2.1">
<span class="example2 aria-button">
  <strong>Settings</strong>
</span>
</textarea>
                    </div>
                    <div>
                        <textarea title="Example 2 JS" style="min-width: 90%;" id="example2.2">
// Convert the span tag into a keyboard accessible button that is accessible to screen reader users.
// Help/ARIA Development/SetKeyboardA11Y

$A.setKBA11Y("span.example2.aria-button", "button",
  function(ev) {
    alert("Do something!");
  }
);
</textarea>
                    </div>
                    <div>
                        <button class="example2">Render Example 2</button>
                        <div role="region" aria-label="Rendered Markup" id="example2"></div>
                        <script type="text/javascript">
                            (function() {
                                var markup = $A.get("example2.1"),
                                    js = $A.get("example2.2"),
                                    div = $A.get("example2");
                                $A.on("button.example2", "click", function(ev) {
                                    try {
                                        div.innerHTML = markup.value;
                                        var f = new Function("window,document,$A", js.value);
                                        f.call(window, window, document, $A);
                                        $A.beep();
                                    } catch (e) {
                                        throw e;
                                    }
                                });
                            })();
                        </script>
                    </div>
                </section>
                <h2 class="heading--onblack">Loading Modules</h2>
                <div>
                    <p>
                        4X also includes the ability to load modules to extend its core functionality. No special format or syntax is needed to do this; any valid JavaScript can be loaded as a module.
                    </p>
                </div>
                <div>
                    <p>
                        However, one of the benefits of using modules is that shared modules need only be loaded once, no matter how many other modules depend on that shared module to function properly.
                    </p>
                </div>
                <h3 class="heading--onblack">Standard Loading</h3>
                <div>
                    <p>
                        The standard script tag can be used to load modules into 4X.
                    </p>
                </div>
                <div>
                    <p>
                        This does, however, require that shared modules be loaded in the correct order.
                    </p>
                </div>
                <div>
                    <p>
                        All available modules that can be loaded using the standard script tag are located in the folder: "4X/Standard".
                    </p>
                </div>
                <div>
                    <p>
                        Whenever a module requires another shared module to be loaded in advance, these dependencies are documented at the top of the relevant module file for easy referencing.
                    </p>
                </div>
                <section aria-label="Example 3">
                    <h4 class="heading--onblack">Example 3</h4>
                    <div>
                        <p>
                            Using a standard script tag to load a module into 4X for advanced functionality.
                        </p>
                    </div>
                    <div>
                        <p>
                            Note: For this to work, the following tags need to be loaded using standard markup.
                        </p>
                    </div>
                    <div>
                        <pre><code class="language-markup">
  &lt;script src="4X/Standard/Modules/Velocity.js">&lt;/script>
  &lt;script src="4X/Standard/Modules/VelocityUI.js">&lt;/script>
  &lt;script src="4X/Standard/Modules/Animate.js">&lt;/script>
  &lt;script src="4X/Standard/Modules/Datepicker.js">&lt;/script>
</code></pre>
                    </div>
                    <div>
                        <link rel="stylesheet" type="text/css" href="Templates/Datepickers/Basic/css/datepicker.css">
                        <script src="4X/Standard/Modules/Velocity.js"></script>
                        <script src="4X/Standard/Modules/VelocityUI.js"></script>
                        <script src="4X/Standard/Modules/Animate.js"></script>
                        <script src="4X/Standard/Modules/Datepicker.js"></script>
                        <textarea title="Example 3 markup" style="min-width: 90%;" id="example3.1">
<label for="dateId">Set Date:</label>
<input placeholder="MM/DD/YYYY" id="dateId" type="text" name="date">
<button id="dateIcon" class="accCalendar aria-date-picker">
  <img src="Templates/Datepickers/Basic/img/calendar-button.svg" alt="Calendar" title="Calendar" />
</button>
</textarea>
                    </div>
                    <div>
                        <textarea title="Example 3 JS" style="min-width: 90%;" id="example3.2">
// Create a datepicker that includes animation effects.
// Help/VelocityUI-Effects-Index
// Help/Module Imports/Dynamic Components/Datepicker

var datepicker = $A.setDatepicker({

  // Unique ID for the date picker instance
  // After instantiation, can be referenced using: var DC = $A("UniqueCalendarId");
  id: "UniqueCalendarId",

  // Icon triggering element
  toggle: $A.get("dateIcon"),

  // Native or simulated input element
  input: $A.get("dateId"),

  style: { position: "absolute", zIndex: 1, display: "none" },
  animate: {
    onRender: function(dc, wrapper, next) {
      Velocity(wrapper, "transition.fadeIn", {
        complete: function() {
          // Running next() is required to continue executing built-in lifecycle methods such as afterRender() when the animation completes.
          next();
        }
      });
    },
    onRemove: function(dc, wrapper, next) {
      Velocity(wrapper, "transition.fadeOut", {
        complete: function() {
          // Running next() is required to continue executing built-in lifecycle methods such as afterRender() when the animation completes.
          next();
        }
      });
    }
  }
});

datepicker.render();
</textarea>
                    </div>
                    <div>
                        <button class="example3">Render Example 3</button>
                        <div role="region" aria-label="Rendered Markup" id="example3"></div>
                        <script type="text/javascript">
                            (function() {
                                var markup = $A.get("example3.1"),
                                    js = $A.get("example3.2"),
                                    div = $A.get("example3");
                                $A.on("button.example3", "click", function(ev) {
                                    try {
                                        div.innerHTML = markup.value;
                                        var f = new Function("window,document,$A", js.value);
                                        f.call(window, window, document, $A);
                                        $A.beep();
                                    } catch (e) {
                                        throw e;
                                    }
                                });
                            })();
                        </script>
                    </div>
                </section>
                <h3 class="heading--onblack">Dynamic Loading</h3>
                <div>
                    <p>
                        In contrast to standard loading, 4X includes the ability to automatically load modules, including all shared module dependencies without requiring any additional script tags.
                    </p>
                </div>
                <div>
                    <p>
                        This does, however, require some configuration to work properly.
                    </p>
                </div>
                <div>
                    <p>
                        Within each of the core 4X JavaScript files ("4X/4X.js" and "4X/4X.Max.js"), there is a variable named "moduleFolder". Open each of these files in a text editor and search for "moduleFolder" to locate this.
                    </p>
                </div>
                <div>
                    <p>
                        By default, 4X asumes that the 4X folder will be located at the root of a website, allowing it to be referenced from any webpage using "/4X/4X.js". If so, then no modification is needed to reference the location of the module folder, though you may wish to change this path to "/4X/Min/" instead to load the minified versions of these files instead of the uncompressed ones.
                    </p>
                </div>
                <div>
                    <p>
                        However, if the root 4X folder location is changed, it is important to change the path referenced by "moduleFolder" so that it will correctly identify the location of the 4X module folder, whether this be "/otherPath/4X/Min/" or "/otherPath/4X/Modules/".
                    </p>
                </div>
                <div>
                    <p>
                        Note: To continue with these examples, you will need to run this page from a local test server.
                    </p>
                </div>
                <div>
                    <p>
                        If you don't already have a local webserver up and running, you can do so by executing the following script files at the root of this archive in the following order.
                    </p>
                </div>
                <ol>
                    <li>"WebserverInstall.sh" : Installs a local webserver that can be run from this folder. (Need only be done once.)</li>
                    <li>"WebserverRun.sh" : Starts the local webserver from this folder as its root.</li>
                </ol>
                <div>
                    <p>
                        After your local webserver is running with all of these files and folders at its root,
                        <a href="http://localhost/Beginner Tutorial.htm#continueAtPoint" id="continueAtPoint">click here to reload this page and continue.</a>
                    </p>
                </div>
                <section aria-label="Example 4">
                    <h4 class="heading--onblack">Example 4</h4>
                    <div>
                        <p>
                            Using dynamic loading to import the Datepicker module into 4X.
                        </p>
                    </div>
                    <div>
                        <p>
                            Unlike the use of standard script tags, dynamic importing does not require any additional scripts to be loaded in advance. All dependencies will automatically be loaded in the background.
                        </p>
                    </div>
                    <textarea title="Example 4 markup" style="min-width: 90%;" id="example4.1">
<label for="dateId2">Set Date:</label>
<input placeholder="MM/DD/YYYY" id="dateId2" type="text" name="date">
<button id="dateIcon2" class="accCalendar aria-date-picker">
  <img src="Templates/Datepickers/Basic/img/calendar-button.svg" alt="Calendar" title="Calendar" />
</button>
</textarea>
        </div>
        <div>
            <textarea title="Example 4 JS" style="min-width: 90%;" id="example4.2">
// Use the import function to load the Datepicker module and execute a callback.
// Help/$A API/Import and Fetch APIs/Import

$A.import(["Animate", "Datepicker"], { defer: true }, function() {

// Create a datepicker that includes animation effects.
// Help/VelocityUI-Effects-Index
// Help/Module Imports/Dynamic Components/Datepicker

var datepicker = $A.setDatepicker({

  // Unique ID for the date picker instance
  // After instantiation, can be referenced using: var DC = $A("UniqueCalendarId2");
  id: "UniqueCalendarId2",

  // Icon triggering element
  toggle: $A.get("dateIcon2"),

  // Native or simulated input element
  input: $A.get("dateId2"),

  style: { position: "absolute", zIndex: 1, display: "none" },
  animate: {
    onRender: function(dc, wrapper, next) {
      Velocity(wrapper, "transition.fadeIn", {
        complete: function() {
          // Running next() is required to continue executing built-in lifecycle methods such as afterRender() when the animation completes.
          next();
        }
      });
    },
    onRemove: function(dc, wrapper, next) {
      Velocity(wrapper, "transition.fadeOut", {
        complete: function() {
          // Running next() is required to continue executing built-in lifecycle methods such as afterRender() when the animation completes.
          next();
        }
      });
    }
  }

});

datepicker.render();

});
</textarea>
        </div>
        <div>
            <button class="example4">Render Example 4</button>
            <div role="region" aria-label="Rendered Markup" id="example4"></div>
            <script type="text/javascript">
                (function() {
                    var markup = $A.get("example4.1"),
                        js = $A.get("example4.2"),
                        div = $A.get("example4");
                    $A.on("button.example4", "click", function(ev) {
                        try {
                            div.innerHTML = markup.value;
                            var f = new Function("window,document,$A", js.value);
                            f.call(window, window, document, $A);
                            $A.beep();
                        } catch (e) {
                            throw e;
                        }
                    });
                })();
            </script>
        </div>
        </section>
        <section aria-label="Example 5">
            <h4 class="heading--onblack">Example 5</h4>
            <div>
                <p>
                    Using dynamic loading to import the Menu module into 4X.
                </p>
            </div>
            <link rel="stylesheet" type="text/css" href="Templates/Menus/Internal/css/menus.css">
            <textarea title="Example 5 markup" style="min-width: 90%;" id="example5.1">
<button data-menu="settings-menu" class="aria-menu">Settings</button>

<ul hidden class="top menu" id="settings-menu">
  <li><a href="#" class="has-submenu">Personal</a>

    <ul hidden class="menu">
      <li><a href="#" class="link" id="personal-name">Name</a></li>
      <li><a href="#" class="link" id="personal-interests">Interests</a></li>
      <li><a href="#" class="link" id="personal-education">Education</a></li>
    </ul>

  </li>
  <li><a href="#" class="has-submenu">Business</a>

    <ul hidden class="menu">
      <li><a href="#" class="link" id="business-name">Name</a></li>
      <li><a href="#" class="link" id="business-contact">Contact</a></li>
    </ul>

  </li>
  <li><a href="https://google.com/" class="link" id="help">Help...</a></li>
</ul>
</textarea>
    </div>
    <div>
        <textarea title="Example 5 JS" style="min-width: 90%;" id="example5.2">
// Use the import function to load the Menu module and execute a callback.
// Help/$A API/Import and Fetch APIs/Import

$A.import(["Animate", "Menu"], { defer: true }, function() {

// Create a menu that includes animation effects.
// Help/VelocityUI-Effects-Index
// Help/Module Imports/Dynamic Components/Menu

var menu = $A.setMenu("button.aria-menu", {

  onActivate: function(ev, menuItem, RTI, boundElement, checked, set, isRadio) {
    RTI.DC.top.remove(function() {
      // Close the top level menu when a menuItem is activated and perform a callback action.
      if (menuItem.href &&
      menuItem.href.indexOf("https://") !== -1)
        location.href = menuItem.href;
      else
        alert(menuItem.id);
    });
  },

  style: { display: "none" },
  animate: {
    onRender: function(dc, wrapper, next) {
      Velocity(wrapper, "transition.slideUpIn", {
        complete: function() {
          // Running next() is required to continue executing built-in lifecycle methods such as afterRender() when the animation completes.
          next();
        }
      });
    },
    onRemove: function(dc, wrapper, next) {
      Velocity(wrapper, "transition.slideUpOut", {
        complete: function() {
          // Running next() is required to continue executing built-in lifecycle methods such as afterRender() when the animation completes.
          next();
        }
      });
    }
  }

});

});
</textarea>
    </div>
    <div>
        <button class="example5">Render Example 5</button>
        <div role="region" aria-label="Rendered Markup" id="example5"></div>
        <script type="text/javascript">
            (function() {
                var markup = $A.get("example5.1"),
                    js = $A.get("example5.2"),
                    div = $A.get("example5");
                $A.on("button.example5", "click", function(ev) {
                    try {
                        div.innerHTML = markup.value;
                        var f = new Function("window,document,$A", js.value);
                        f.call(window, window, document, $A);
                        $A.beep();
                    } catch (e) {
                        throw e;
                    }
                });
            })();
        </script>
    </div>
    </section>
    <h2 class="heading--onblack">Conclusion</h2>
    <div>
        <p>
            With these examples, the various ways that you can use 4X to enhance accessibility for web technologies should be clearer.
        </p>
    </div>
    <div>
        <p>
            <a id="templatesLink" class="templatesLink" href="Templates/index.htm">Browse Accessible Widget Templates</a>
        </p>
    </div>
    </main>
    </div>
    <footer class="footer">
        <div class="flex-container-row">
            <div class="flex-item">
                <h2>License</h2>
                <p>
                    Apex 4X including all template design patterns is distributed under the terms of the Open Source Initiative OSI - MIT License, and may be freely used for any purpose within any web technology.
                </p>
            </div>
            <div class="flex-item">
                <h2>Resources</h2>
                <ul>
                    <li>
                        <a target="ext" href="https://github.com/WhatSock/apex">Apex 4X on GitHub</a>
                    </li>
                    <li>
                        <a target="ext" href="http://whatsock.com/training/matrices/visual-aria.htm">Visual ARIA Bookmarklet</a>
                    </li>
                    <li>
                        <a target="ext" href="https://chrome.google.com/webstore/detail/visual-aria/lhbmajchkkmakajkjenkchhnhbadmhmk">Visual ARIA Chrome Extension</a>
                    </li>
                    <li>
                        <a target="ext" href="https://addons.mozilla.org/en-US/firefox/addon/visual-aria/">Visual ARIA Firefox Extension</a>
                    </li>
                    <li>
                        <a target="ext" href="https://github.com/AccDC/visual-aria">Visual ARIA on GitHub</a>
                    </li>
                    <li>
                        <a target="ext" href="http://whatsock.com/training/matrices/">ARIA Role Conformance Matrices</a>
                    </li>
                    <li>
                        <a target="ext" href="http://whatsock.com/training/">Accessibility Tree Training Guide</a>
                    </li>
                </ul>
            </div>
            <div class="flex-item">
                <h2>Acknowledgements</h2>
                <ul class="list--horizontal">
                    <li>
                        Author and developer:
                        <a target="ext" href="https://www.linkedin.com/in/bgaraventa">Bryan Garaventa</a>
                    </li>
                    <li>
                        Website designer:
                        <a target="ext" href="http://gericci.me/">Angela Ricci</a>
                    </li>
                    <li>
                        Style and markup editor:
                        <a target="ext" href="https://www.linkedin.com/in/laurence-lewis-77520365/">Laurence Lewis</a>
                    </li>
                </ul>
            </div>
        </div>
    </footer>
    </div>
</body>
<script src="Templates/_common/_doc_files/autosize.js"></script>
<script type="text/javascript">
    autosize($A.query("textarea"));
</script>

</html>