
ARIA Trees

Expected behaviors: Ensure that each tree has only one tab stop and that available tree items can be navigated using the arrow keys in the same manner as a native Windows TreeView control.

The 4X ARIA Tree module automatically configures all required ARIA attributes and focus handling, in strict accordance with the ARIA 1.2 specification.

The following attributes are handled automatically by the Tree module:

• role=tree/group
• role=treeitem
• aria-expanded
• aria-checked
• aria-owns
• aria-level
• aria-multiselectable
• aria-selected
• tabindex

Available attributes for tree item links:

• controls : The resource path and pointer to the ID attribute of the subtree container element.
• check : May be set to "false", "true", or "mixed" to set the current state of a checkbox tree item when rendered.

HTML syntax:

[Standard Tree]

<ul class="aria-tree top">
  <li>
    <a>
      Name One
    </a>

    <ul>
      <li>
        <a>
          Name Two
        </a>
      </li>
    </ul>

  </li>
</ul>

[Tree Plus Checkable Items]

<ul class="aria-tree top">
  <li>
    <a>
      Name One
    </a>

    <ul>
      <li>
        <a check >
          Name Two
        </a>
      </li>
    </ul>

  </li>
</ul>

IMPORTANT: An ARIA Tree must never include any other active elements other than those specified as tree items. Otherwise, all such additional active elements will be undiscoverable and inaccessible to non-sighted screen reader users.

JavaScript syntax:

var myTreeDC = $A.setTree( DOM-Node-or-CSS-Selector-forRoot-Container, {
// Configure functionality key / value mappings
});

Parameters

1: A DOM element or CSS selector to specify the top level container element of the tree structure.

2: A configuration map to customize behaviors and options.

Configuration

{

// Specifies that the referenced content for rendering should not be dynamically inserted into the DOM, but will instead toggle the hidden attribute.
toggleHide: true,

// Optionally specify the content to be rendered when referencing external content.
// If set, the source property will be auto-populated with the returned content.
fetch: {
url: "path/file.htm",
data: {
selector: "#uniqueId"
}
},

tag: {

// CSS selector for the top level tree container.
parent: "ul",

// The CSS selector that identifies the focusable active element within each child tag markup.
// Only one focusable element is allowed within each child tag.
// If the child tag markup is changed, this selector must also be changed to point to the focusable active element within that markup.
child: "a",

// Return an array of all focusable child elements within the tree container element.
parse: function(ref) {
if ($A.isIE()) {
var mItems = [];
$A.query(ref.children, function(i, o) {
var c = $A.first(o, function(e) {
if (e.nodeName.toLowerCase() === tag.child)
return true;
});
if ($A.isNode(c)) mItems.push(c);
});
return mItems;
} else
return ref.querySelectorAll(":scope > * > " + tag.child);
}

},

// Set a custom event handler to process every time a tree item is activated.
onActivate: function(event, triggerNode, RTI, DC, currentState, setNewStateFn) {
// If the tree item is checkable, currentState will include a number from 0 to 2.
// (0 = "false", 1 = "true", 2 = "mixed".)
// The setNewStateFn function can be used to set a new state for the option.
// E.G. setNewStateFn("false"), setNewStateFn("true"), or setNewStateFn("mixed") for checkbox tree items only.
},

// Set the class name for the top level container element
className: 'tree',

// Optionally run a script after the tree finishes rendering.
afterRender: function(DC) {
// DC.container is the rendered tree content.
},

// Optionally run a script after the tree is removed.
afterRemove: function(DC) {
// Do something.
},

// Optionally specify a render and remove animation effect for the tree.
// Requires the "Animate" module import to function, which is powered by Velocity.js.
// To ignore animation effects, delete the animate object declaration entirely from the setup script.
// View implementations within "TSG/WidgetTemplates/Trees" for practical animation usage examples.

style: { display: "none" }, // Set the initial state to hidden in prep for animation.

animate: {

onRender: function(dc, wrapper, next) {

// Specify the render animation effect, including the callback function statement to execute when the animation effect completes.
Velocity(wrapper, "transition.TYPE", {
// Velocity options here, plus the callback declaration after the animation completes.
complete: function() {
next(); // REQUIRED: next() must be executed so control is passed back to 4X for rendering.
}
});

},

onRemove: function(dc, wrapper, next) {

// Specify the removal animation effect, including the callback function statement to execute when the animation effect completes.
Velocity(wrapper, "transition.TYPE", {
// Velocity options here, plus the callback declaration after the animation completes.
complete: function() {
next(); // REQUIRED: next() must be executed so control is passed back to 4X for removal.
}
});

}

},

// Optionally extend the RTI instance with custom event handlers.
// For available options, view the RovingTabIndex help doc at "Help/$A API/ARIA Development/Module Imports/Actions/RovingTabIndex".
extendRTI: {
// Optional event handlers.
}

// (Other 4X API properties and methods can be declared here also to customize functionality and behavior)
// To view available options, reference the help docs located at: "Help/DC API/DC Object Configuration"

}
