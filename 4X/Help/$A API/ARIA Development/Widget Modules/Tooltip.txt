
ARIA Tooltips

Expected behaviors: Hover tooltips appear when moused over and when the triggering element receives focus, then close when the mouse moves away or when focus moves to a different element. 
Manual tooltips appear when the triggering element is activated, then close when clicked again or when focus moves to a different element. 
Responsive tooltips appear when validation criteria are met when typing, and close when focus moves to a different element. 
Error tooltips appear when focus moves away from a field that fails validation, then close when focus moves back to the triggering element.

The 4X ARIA Tooltip module automatically configures all required ARIA attributes and focus handling, in strict accordance with the ARIA 1.2 specification.

The following attributes are handled automatically by the Tooltip module:

• role=tooltip
• aria-describedby

JavaScript syntax:

$A.setTooltip( DOM-Node-or-CSS-Selector-forTriggering-Element , {
// Configure functionality key / value mappings
});

Parameters

1: A DOM element or CSS selector to specify the triggering element.

2: A configuration map to customize behaviors and options.

Configuration

{

// Optionally set a unique ID for the tooltip DC object, which can be referenced through $A('uniqueId')
// If not specified, the id of the triggering element will be used instead.
id: 'uniqueId',

// Optionally specify the content to be rendered when referencing internal content.
// May be a DOM node or CSS selector.
// Not necessary if data-controls is set on the triggering element.
source: "#uniqueId",

// Optionally specify the content to be rendered when referencing external content.
// Not necessary if data-controls is set on the triggering element.
// If set, the source property will be auto-populated with the returned content.
fetch: {
url: "path/file.htm",
data: {
selector: "#uniqueId"
}
},

// Set the class name for the top level container element
className: 'tooltip',

// Set the class name for the screen reader accessible close link
// This must match the class name for any close links or buttons within the tooltip content, which will cause close event binding to automatically occur when the content is rendered.
closeClassName: "CloseDC",

// Optionally specify if the tooltip is an alert message.
// If true, a system alert will be fired when the tooltip is rendered.
isAlert: false,

// Specify that the tooltip is an inline error message.
isError: false,

// Specify that the tooltip will only open when the triggering element receives focus, and not when moused over.
isFocusOnly: false,

// Specify that the tooltip will be displayed only when specific validation criteria are met when typing.
isResponsive: false,

// Specify that the tooltip will only open when the triggering element is clicked, and will close when clicked again.
isManualOpen: false,

// Specify that the tooltip will only close when the mouse leaves the tooltip instead of the triggering element.
isManualClose: true,

// Optionally run a script after the tooltip finishes rendering.
afterRender: function(DC) {
// DC.container is the rendered tooltip content.
},

// Optionally run a script after the tooltip is removed.
afterRemove: function(DC) {
// Do something.
},

// Optionally specify a delay in milliseconds to wait before rendering the tooltip after the triggering element is activated.
delay: 0,

// Optionally specify a timeout length in milliseconds, after which the tooltip will automatically close.
delayTimeout: 0,

// Optionally override the default timeout function that occurs after the delayTimeout length is reached.
timeout: function(dc) {
dc.remove();
},

// Optionally specify a render and remove animation effect for the tooltip.
// Requires the "Animate" module import to function, which is powered by Velocity.js.
// To ignore animation effects, delete the animate object declaration entirely from the setup script.
// View implementations within "TSG/WidgetTemplates/Tooltips" for practical animation usage examples.

style: { display: "none" }, // Set the initial state to hidden in prep for animation.

animate: {

onRender: function(dc, outerNode, complete) {

// Specify the render animation effect, including the callback function statement to execute when the animation effect completes.
Velocity(outerNode, "transition.TYPE", {
// Velocity options here, plus the callback declaration after the animation completes.
complete: function() {
complete(); // REQUIRED: complete() must be executed so control is passed back to 4X for rendering.
}
});

},

onRemove: function(dc, outerNode, complete) {

// Specify the removal animation effect, including the callback function statement to execute when the animation effect completes.
Velocity(outerNode, "transition.TYPE", {
// Velocity options here, plus the callback declaration after the animation completes.
complete: function() {
complete(); // REQUIRED: complete() must be executed so control is passed back to 4X for removal.
}
});

}

}

// (Other 4X API properties and methods can be declared here also to customize functionality and behavior)
// To view available options, reference the help docs located at: "4X/Help/DC API/DC Object Configuration"

}

Programmatic Control

// Get the DC object for the tooltip using its id.
var DC = $A("tooltipId");

// Open the tooltip manually.
DC.render(function() {
// Optionally do something after rendering completes.
});

// Close the tooltip manually.
DC.remove(function() {
// Optionally do something after removal completes.
});

// All other 4X API properties and methods can be applied here as well.
// To view available options, reference the help docs located at: "4X/Help/DC API/DC Object Properties and Methods"

Straylight

When the Straylight module is loaded, it parses the newly loaded document, recognizes the class "aria-tooltip" on the link or button triggering element, then configures the tooltip using these HTML5 attributes.

Available attributes for the triggering element:

• data-controls : The resource path and pointer to the ID attribute of the tooltip container element.

Additional attributes can be added to enhance functionality by editing the file "4X/Modules/Straylight".
