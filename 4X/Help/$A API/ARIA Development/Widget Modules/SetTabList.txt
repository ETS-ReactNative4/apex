
ARIA Tabs

Expected behaviors: The group of triggering elements should have only one tab stop, the arrow keys should move focus between each Tab in the group, pressing Enter or Space should expand the desired Tab panel, the expanded state should be toggled appropriately on the triggering element, and the expanded Tab panel should be rendered directly after the group of triggering elements in the tab order.

Though similar in both concept and execution to accordion controls, Tabs are not the same. A Tab control has a series of grouped triggering elements that expand and collapse, the rendered content of which is inserted directly after the triggering element group when opened. The container element insertion point for all Tab control triggering elements is shared between them. Also, the group of triggering elements in a Tab control has only one tab stop. The arrow keys are then used to switch focus between each Tab, and the Enter or Space key is used to expand the desired Tab content panel.

In contrast, an Accordion has a series of triggering elements that expand and collapse, the rendered content of which is inserted directly after the triggering element when opened. The container element insertion points for Accordions are not shared. Also, all Accordion links appear in the tab order. The reason why ARIA attributes such as role="tablist" and role="tab" are not included within accordions, is because the insertion of inline content would place dynamic content sections within the same Tablist container, making it impossible to determine the order of nested Tab controls when present within the inserted content. The chosen implementation should always match the UI that it's being applied to, to prevent confusion.

The 4X ARIA TabList module automatically configures all required ARIA attributes and focus handling, in strict accordance with the ARIA 1.2 Tab design pattern.

HTML5 "data-" attributes are used to configure specific functionality for each Tab expand/collapse link. These include the following:

• data-controls : The resource path and pointer to the ID attribute of the Tab content container element.
• data-insert : The ID attribute of the container element where the Tab content will be inserted when rendered. (This must not be inside the triggering element, and must be the same for all Tab links within the same group)
• data-active="true" : Specifies that the referenced Tab panel will open automatically. (Only one Tab link per group should include this attribute.)

Required attributes:

• role="tablist" must be included on the container element (where all Tab links are contained within).
• role="tab" must be included on all Tab links, and must always be set on the triggering element that receives focus.
• All Tab links (with role="tab") must include unique ID attribute values.

Important: The insertion point where Tab panel content is rendered must be inline with (meaning directly after) the Tablist group, to ensure accessibility for screen reader and keyboard only users. (No other active elements or page content should separate them.) Do not put the insertion point element inside the role="tablist" container element.

JavaScript syntax:

$A.setTabList({
// Configuration key / value mappings
});

Configuration

{

// A CSS Selector or DOM node that specifies the TabList container (with role="tablist"), within which all associated role="tab" elements are contained.
tabList: domElementOrCSSSelector,

// Preload HTML markup to speed rendering
// (only applicable when pulling content from an external page, remove otherwise)
preload: true,

// Preload images to speed rendering
// (only applicable when pulling content from an external page, remove otherwise)
preloadImages: true,

// Preload CSS stylesheets to speed rendering
// (only applicable when importCSS is set.
preloadCSS: true,

// Import external CSS stylesheets when the component is rendered
importCSS: [
"path/stylesheet1.css",
"path/stylesheet2.css"
],

// Set a className that will be added to the triggering element for the currently active tab
toggleClass: 'active',

// Choose whether or not to make Tab expand/collapse links toggles as well
isToggle: false,

// Optionally disable focusability of the tabpanel container
disableTabPanelFocus: false,

// Optionally set a context element when using a CSS selector to specify role="tablist" containers.
context: document,

// Auto configure orientation using dynamic switching based on the visual layout of focusable elements.
// "off"=Inactive, "semi"=Switches between vertical and horizontal only, "full"= Switches between vertical, horizontal, and both when line-wrapping is detected.
autoSwitch: "full",

extendRTI: {
// Optionally extend the RovingTabIndex declaration when instantiated.
// Available options are documented at: "4X/Help/$A API/ARIA Development/Action Modules/RovingTabIndex".
},

callback: function(dc) {
// Optional callback fired every time a tabpanel is opened or closed.
// dc.loaded = true or false depending on the new state
// dc.triggerObj = the associated role="tab" element.
// dc.container = the tabpanel container element when rendered.
}

// Additional 4X API properties and methods may be applied here as well if desired.

}

Important: The ARIA attributes role="tablist" and role="tab" must only be used on client side widgets that don't require a page refresh or navigate to another page.

Programmatic Control

Every Tab panel is registered as an DC object, the ID of which matches the ID attribute value on the Tab expand/collapse link. For this reason, all Tab expand/collapse links must have unique ID attribute values.

This means that you can programmatically control each Tab panel using JavaScript if desired, like so:

// Get a reference to the Tab DC object for the Tab expand/collapse link with id="uniqueId"

var dc = $A('uniqueId');

// Now invoke the object

dc.render();

// Or

dc.remove();

// All other 4X API properties and methods can be applied here as well.

Straylightping

Straylightping is designed to handle common control types that span multiple pages with similar setup configurations.

When the Straylight module is executed, it parses the newly loaded DOM, recognizes the class "aria-tablist", then configures the same module declaration as previously described using these HTML5 attributes.

Available HTML5 attributes for the triggering element:

• data-controls : The resource path and pointer to the ID attribute of the tab content container element.
• data-active="true" : Specifies that the referenced tab will open automatically. Only one tab per group should include this attribute.
• data-insert : The ID attribute of the container element where tab panel content will be inserted.

Additional HTML5 attributes can be added to enhance functionality by editing the file "/4X/Modules/Straylight".
