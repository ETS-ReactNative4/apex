
ARIA Popups

Expected behaviors: Move focus into the popup when it is rendered, ensure that the beginning and ending boundaries are conveyed to screen reader users, make sure the popup can be closed from the keyboard, ensure that circular tabbing confines keyboard focus within the popup content, and move focus back to the triggering element after the popup is removed.

The 4X ARIA Popup module automatically configures all required ARIA attributes and focus handling, in strict accordance with the ARIA 1.2 specification.

The following attributes are handled automatically by the Popup module:

• role=region
• aria-label

JavaScript syntax:

$A.setPopup({
// Configure functionality key / value mappings
});

Configuration

{

// Set a unique ID for the popup DC object, which can be referenced through $A('uniqueId')
id: 'uniqueId',

// Optionally Set a triggering element using either the DOM node or a CSS Selector
trigger: '#popupTrigger',

// Optionally prevent focus from returning to a triggering element
returnFocus: false,

// Specify the content to be rendered when referencing internal content.
// May be a DOM node or CSS selector.
source: "#uniqueId",

// Specify the content to be rendered when referencing external content.
fetch: {
url: "path/file.htm",
data: {
selector: "#uniqueId"
}
},

// Set the class name for the top level container element
className: 'popup',

// Set the class name for the screen reader accessible close link
// This must match the class name for any close links or buttons within the popup content, which will cause Close Method Binding to automatically occur when the content is rendered.
closeClassName: "CloseDC",

// Specify if the popup is an alert popup.
// If true, a system alert will be fired when the popup is rendered, causing screen reader users to be aggressively notified.
isAlert: false,

// Run script after the popup finishes rendering.
runAfter: function(DC) {
// DC.container is the rendered popup content.
},

// Run script after the popup is removed.
runAfterClose: function(DC) {
// Do something.
}

// (Other 4X API properties and methods can be declared here also to customize functionality and behavior)

}

Programmatic Control

// Get the DC object for the popup.
var DC = $A("popupId");

// Open the popup manually.
DC.render();

// Close the popup manually.
DC.remove();

// All other 4X API properties and methods can be applied here as well.

Bootstrapping

Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.

When the Bootstrap module is loaded, it parses the newly loaded document, recognizes the class "aria-popup" on the link or button triggering element, then configures the popup using these HTML5 attributes.

Available HTML5 attributes for the triggering element:

• data-controls : The resource path and pointer to the ID attribute of the popup container element.

Additional HTML5 attributes can be added to enhance functionality by editing the file "4X/Modules/Bootstrap".

Required attributes for the triggering element:

• class="aria-popup" : The bootstrap class name that specifies an accessible popup.
• id : The unique ID of the element. This value is also registered as the ID of the popup DC object, making it possible to invoke the object programmatically.
